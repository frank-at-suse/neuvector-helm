# Default values for neuvector.
# This is a YAML-formatted file.
# Declare variables to be passed into the templates.

openshift: false

registry: docker.io
tag: 5.2.0
oem:
imagePullSecrets:
psp: false
rbac: true # required for rancher authentication
serviceAccount: neuvector
leastPrivilege: false
global: # required for rancher authentication (https://<Rancher_URL>/)
  cattle:
    url: https://rancher.felab.io

internal: # enable when cert-manager is installed for the internal certificates
  certmanager: 
    enabled: false
    secretname: neuvector-internal

controller:
  # If false, controller will not be installed
  enabled: true
  annotations: {}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  image:
    repository: neuvector/controller
    hash:
  replicas: 1
  disruptionbudget: 0
  schedulerName:
  priorityClassName:
  podLabels: {}
  podAnnotations: {}
  env: []
  affinity:
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        podAffinityTerm:
          labelSelector:
            matchExpressions:
            - key: app
              operator: In
              values:
              - neuvector-controller-pod
          topologyKey: "kubernetes.io/hostname"
  tolerations: []
  nodeSelector: {}
    # key1: value1
    # key2: value2
  apisvc:
    type:
    annotations: {}
    # OpenShift Route configuration
    # Controller supports HTTPS only, so edge termination not supported
    route:
      enabled: false
      termination: passthrough
      host:
      tls:
        #certificate: |
        #  -----BEGIN CERTIFICATE-----
        #  -----END CERTIFICATE-----
        #caCertificate: |
        #  -----BEGIN CERTIFICATE-----
        #  -----END CERTIFICATE-----
        #destinationCACertificate: |
        #  -----BEGIN CERTIFICATE-----
        #  -----END CERTIFICATE-----
        #key: |
        #  -----BEGIN PRIVATE KEY-----
        #  -----END PRIVATE KEY-----
  ranchersso: # required for rancher authentication
    enabled: true
  pvc:
    enabled: false
    existingClaim: false
    accessModes:
      - ReadWriteMany
    storageClass:
    capacity:
  azureFileShare:
    enabled: false
    secretName:
    shareName:
  certificate:
    secret:
    keyFile: tls.key
    pemFile: tls.pem
  internal: # this is used for internal communication. Please use the SAME CA for all the components (controller, scanner, adapter and enforcer)
    certificate:
      secret: neuvector-internal
      keyFile: tls.key
      pemFile: tls.crt
      caFile: ca.crt # must be the same CA for all internal.
  federation:
    mastersvc:
      type:
      # Federation Master Ingress
      ingress:
        enabled: false
        host:  # MUST be set, if ingress is enabled
        ingressClassName: ""
        path: "/"  # or this could be "/api", but might need "rewrite-target" annotation
        annotations:
          nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
          # ingress.kubernetes.io/rewrite-target: /
        tls: false
        secretName:
      annotations: {}
      # OpenShift Route configuration
      # Controller supports HTTPS only, so edge termination not supported
      route:
        enabled: false
        termination: passthrough
        host:
        tls:
          #certificate: |
          #  -----BEGIN CERTIFICATE-----
          #  -----END CERTIFICATE-----
          #caCertificate: |
          #  -----BEGIN CERTIFICATE-----
          #  -----END CERTIFICATE-----
          #destinationCACertificate: |
          #  -----BEGIN CERTIFICATE-----
          #  -----END CERTIFICATE-----
          #key: |
          #  -----BEGIN PRIVATE KEY-----
          #  -----END PRIVATE KEY-----
    managedsvc:
      type:
      # Federation Managed Ingress
      ingress:
        enabled: false
        host:  # MUST be set, if ingress is enabled
        ingressClassName: ""
        path: "/"  # or this could be "/api", but might need "rewrite-target" annotation
        annotations:
          nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
          # ingress.kubernetes.io/rewrite-target: /
        tls: false
        secretName:
      annotations: {}
      # OpenShift Route configuration
      # Controller supports HTTPS only, so edge termination not supported
      route:
        enabled: false
        termination: passthrough
        host:
        tls:
          #certificate: |
          #  -----BEGIN CERTIFICATE-----
          #  -----END CERTIFICATE-----
          #caCertificate: |
          #  -----BEGIN CERTIFICATE-----
          #  -----END CERTIFICATE-----
          #destinationCACertificate: |
          #  -----BEGIN CERTIFICATE-----
          #  -----END CERTIFICATE-----
          #key: |
          #  -----BEGIN PRIVATE KEY-----
          #  -----END PRIVATE KEY-----
  ingress:
    enabled: false
    host:  # MUST be set, if ingress is enabled
    ingressClassName: ""
    path: "/"  # or this could be "/api", but might need "rewrite-target" annotation
    annotations:
      nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
      # ingress.kubernetes.io/rewrite-target: /
    tls: false
    secretName:
  resources: {}
    # limits:
    #   cpu: 400m
    #   memory: 2792Mi
    # requests:
    #   cpu: 100m
    #   memory: 2280Mi
  configmap:
    enabled: true
    data:
      sysinitcfg.yaml: |
        new_service_profile_baseline: basic  # Disable automated protection that prevents processes and file system drift for new groups. Options are 'basic' and 'zero-drift'
        No_Telemetry_Report: true            # Disable reporting cluster data
        Scan_Config:
          Auto_Scan: true
        Scanner_Autoscale:
          Strategy: delayed
          Min_Pods: 1
          Max_Pods: 3
  secret:
    # NOTE: files defined here have preferrence over the ones defined in the configmap section
    enabled: false
    data: {}
      # passwordprofileinitcfg.yaml: |
      #  ...
      # roleinitcfg.yaml: |
      #  ...
      # ldapinitcfg.yaml:
      #   directory: OpenLDAP
      #   ...
      # oidcinitcfg.yaml:
      #   Issuer: https://...
      #   ...
      # samlinitcfg.yaml:
      #   ...
      # sysinitcfg.yaml:
      #   ...
      # userinitcfg.yaml:
      #   ...

enforcer:
  # If false, enforcer will not be installed
  enabled: true
  image:
    repository: neuvector/enforcer
    hash:
  updateStrategy:
    type: RollingUpdate
  priorityClassName:
  podLabels: {}
  podAnnotations: {}
  env: []
  tolerations:
    - effect: NoExecute
      key: node-role.kubernetes.io/etcd
    - effect: NoSchedule
      key: node-role.kubernetes.io/master
    - effect: NoSchedule
      key: node-role.kubernetes.io/control-plane
  resources: {}
    # limits:
    #   cpu: 400m
    #   memory: 2792Mi
    # requests:
    #   cpu: 100m
    #   memory: 2280Mi
  internal: # this is used for internal communication. Please use the SAME CA for all the components (controller, scanner, adapter and enforcer)
    certificate:
      secret: neuvector-internal
      keyFile: tls.key
      pemFile: tls.crt
      caFile: ca.crt # must be the same CA for all internal.
      
manager:
  # If false, manager will not be installed
  enabled: true
  image:
    repository: neuvector/manager
    hash:
  priorityClassName:
  env:
    ssl: true
    envs:
    - name: CUSTOM_PAGE_HEADER_COLOR 
      value: '#007a33' # Unclass header background
    - name: CUSTOM_PAGE_HEADER_CONTENT
      value: TWFyLUEtTGFnbyBCYXNlbWVudAo= # base64 encoded "U//FOUO"
    - name: CUSTOM_PAGE_FOOTER_COLOR
      value: '#007a33' # Unclass footer background
    - name: CUSTOM_PAGE_FOOTER_CONTENT
      value: TWFyLUEtTGFnbyBCYXNlbWVudAo= # base64 encoded "U//FOUO"
    - name: CUSTOM_EULA_POLICY
      value: PGI+WW91IGFyZSBhY2Nlc3NpbmcgYSBVLlMuIEdvdmVybm1lbnQgKFVTRykgSW5mb3JtYXRpb24gU3lzdGVtIChJUykgdGhhdCBpcyBwcm92aWRlZCBmb3IgVVNHLWF1dGhvcml6ZWQgdXNlIG9ubHkuPC9iPjxicj4KPGJyPgpCeSB1c2luZyB0aGlzIElTICh3aGljaCBpbmNsdWRlcyBhbnkgZGV2aWNlIGF0dGFjaGVkIHRvIHRoaXMgSVMpLCB5b3UgY29uc2VudCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6PGJyPgo8YnI+Ci1UaGUgVVNHIHJvdXRpbmVseSBpbnRlcmNlcHRzIGFuZCBtb25pdG9ycyBjb21tdW5pY2F0aW9ucyBvbiB0aGlzIElTIGZvciBwdXJwb3NlcyBpbmNsdWRpbmcsIGJ1dCBub3QgbGltaXRlZCB0bywgcGVuZXRyYXRpb24gdGVzdGluZywgQ09NU0VDIG1vbml0b3JpbmcsIG5ldHdvcmsgb3BlcmF0aW9ucyBhbmQgZGVmZW5zZSwgcGVyc29ubmVsIG1pc2NvbmR1Y3QgKFBNKSwgbGF3IGVuZm9yY2VtZW50IChMRSksIGFuZCBjb3VudGVyaW50ZWxsaWdlbmNlIChDSSkgaW52ZXN0aWdhdGlvbnMuPGJyPgo8YnI+Ci1BdCBhbnkgdGltZSwgdGhlIFVTRyBtYXkgaW5zcGVjdCBhbmQgc2VpemUgZGF0YSBzdG9yZWQgb24gdGhpcyBJUy48YnI+Cjxicj4KLUNvbW11bmljYXRpb25zIHVzaW5nLCBvciBkYXRhIHN0b3JlZCBvbiwgdGhpcyBJUyBhcmUgbm90IHByaXZhdGUsIGFyZSBzdWJqZWN0IHRvIHJvdXRpbmUgbW9uaXRvcmluZywgaW50ZXJjZXB0aW9uLCBhbmQgc2VhcmNoLCBhbmQgbWF5IGJlIGRpc2Nsb3NlZCBvciB1c2VkIGZvciBhbnkgVVNHLWF1dGhvcml6ZWQgcHVycG9zZS48YnI+Cjxicj4KLVRoaXMgSVMgaW5jbHVkZXMgc2VjdXJpdHkgbWVhc3VyZXMgKGUuZy4sIGF1dGhlbnRpY2F0aW9uIGFuZCBhY2Nlc3MgY29udHJvbHMpIHRvIHByb3RlY3QgVVNHIGludGVyZXN0cy0tbm90IGZvciB5b3VyIHBlcnNvbmFsIGJlbmVmaXQgb3IgcHJpdmFjeS48YnI+Cjxicj4KLU5vdHdpdGhzdGFuZGluZyB0aGUgYWJvdmUsIHVzaW5nIHRoaXMgSVMgZG9lcyBub3QgY29uc3RpdHV0ZSBjb25zZW50IHRvIFBNLCBMRSBvciBDSSBpbnZlc3RpZ2F0aXZlIHNlYXJjaGluZyBvciBtb25pdG9yaW5nIG9mIHRoZSBjb250ZW50IG9mIHByaXZpbGVnZWQgY29tbXVuaWNhdGlvbnMsIG9yIHdvcmsgcHJvZHVjdCwgcmVsYXRlZCB0byBwZXJzb25hbCByZXByZXNlbnRhdGlvbiBvciBzZXJ2aWNlcyBieSBhdHRvcm5leXMsIHBzeWNob3RoZXJhcGlzdHMsIG9yIGNsZXJneSwgYW5kIHRoZWlyIGFzc2lzdGFudHMuIFN1Y2ggY29tbXVuaWNhdGlvbnMgYW5kIHdvcmsgcHJvZHVjdCBhcmUgcHJpdmF0ZSBhbmQgY29uZmlkZW50aWFsLiBTZWUgVXNlciBBZ3JlZW1lbnQgZm9yIGRldGFpbHMuIDxicj4gCg==
  svc:
    type: ClusterIP # should be set to - ClusterIP
    loadBalancerIP:
    annotations: {}
      # azure
      # service.beta.kubernetes.io/azure-load-balancer-internal: "true"
      # service.beta.kubernetes.io/azure-load-balancer-internal-subnet: "apps-subnet"
  # OpenShift Route configuration
  # Make sure manager env ssl is false for edge termination
  route:
    enabled: true
    termination: passthrough
    host:
    tls:
      #certificate: | 
      #  -----BEGIN CERTIFICATE-----
      #  -----END CERTIFICATE-----
      #caCertificate: | 
      #  -----BEGIN CERTIFICATE-----
      #  -----END CERTIFICATE-----
      #destinationCACertificate: | 
      #  -----BEGIN CERTIFICATE-----
      #  -----END CERTIFICATE-----
      #key: | 
      #  -----BEGIN PRIVATE KEY-----
      #  -----END PRIVATE KEY-----
  certificate:
    secret:
    keyFile: tls.key
    pemFile: tls.pem
  ingress:
    enabled: true
    host: neuvector.dev.felab.io
    ingressClassName: ""
    path: "/"
    annotations:
      nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
      cert-manager.io/issuer: cluster-staging
      cert-manager.io/issuer-kind: ClusterIssuer
      # kubernetes.io/ingress.class: my-nginx
      # nginx.ingress.kubernetes.io/whitelist-source-range: "1.1.1.1"
      # nginx.ingress.kubernetes.io/rewrite-target: /
      # nginx.ingress.kubernetes.io/enable-rewrite-log: "true"
      # only for end-to-end tls conf - ingress-nginx accepts backend self-signed cert
    tls: true
    secretName: neuvector-ingress
  resources: {}
    # limits:
    #   cpu: 400m
    #   memory: 2792Mi
    # requests:
    #   cpu: 100m
    #   memory: 2280Mi
  affinity: {}
  podLabels: {}
  podAnnotations: {}
  tolerations: []
  nodeSelector: {}
    # key1: value1
    # key2: value2
  runAsUser:  # MUST be set for Rancher hardened cluster
  
cve:
  adapter:
    enabled: false
    image:
      repository: neuvector/registry-adapter
      tag: 0.1.0
      hash:
    priorityClassName:
    resources: {}
      # limits:
      #   cpu: 400m
      #   memory: 512Mi
      # requests:
      #   cpu: 100m
      #   memory: 1024Mi
    affinity: {}
    podLabels: {}
    podAnnotations: {}
    env: []
    tolerations: []
    nodeSelector: {}
      # key1: value1
      # key2: value2
    runAsUser:  # MUST be set for Rancher hardened cluster
    certificate:
      secret:
      keyFile: tls.key
      pemFile: tls.pem
    harbor:
      protocol: https
      secretName:
    svc:
      type: NodePort # should be set to - ClusterIP
      loadBalancerIP:
      annotations: {}
        # azure
        # service.beta.kubernetes.io/azure-load-balancer-internal: "true"
        # service.beta.kubernetes.io/azure-load-balancer-internal-subnet: "apps-subnet"
    # OpenShift Route configuration
    route:
      enabled: true
      termination: passthrough
      host:
      tls:
        #certificate: |
        #  -----BEGIN CERTIFICATE-----
        #  -----END CERTIFICATE-----
        #caCertificate: |
        #  -----BEGIN CERTIFICATE-----
        #  -----END CERTIFICATE-----
        #destinationCACertificate: |
        #  -----BEGIN CERTIFICATE-----
        #  -----END CERTIFICATE-----
        #key: |
        #  -----BEGIN PRIVATE KEY-----
        #  -----END PRIVATE KEY-----
    ingress:
      enabled: false
      host:  # MUST be set, if ingress is enabled
      ingressClassName: ""
      path: "/"
      annotations:
        nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
        # kubernetes.io/ingress.class: my-nginx
        # nginx.ingress.kubernetes.io/whitelist-source-range: "1.1.1.1"
        # nginx.ingress.kubernetes.io/rewrite-target: /
        # nginx.ingress.kubernetes.io/enable-rewrite-log: "true"
        # only for end-to-end tls conf - ingress-nginx accepts backend self-signed cert
      tls: false
      secretName:  # my-tls-secret
    internal: # this is used for internal communication. Please use the SAME CA for all the components (controller, scanner, adapter and enforcer)
      certificate:
        secret: neuvector-internal
        keyFile: tls.key
        pemFile: tls.crt
        caFile: ca.crt # must be the same CA for all internal.
  updater:
    # If false, cve updater will not be installed
    enabled: true
    secure: false
    image:
      registry: ""
      repository: neuvector/updater
      tag: latest
      hash:
    schedule: "0 0 * * *"
    priorityClassName:
    podLabels: {}
    podAnnotations: {}
    nodeSelector: {}
      # key1: value1
      # key2: value2
    runAsUser:  # MUST be set for Rancher hardened cluster
  scanner:
    enabled: true
    replicas: 1
    dockerPath: ""
    strategy:
      type: RollingUpdate
      rollingUpdate:
        maxSurge: 1
        maxUnavailable: 0
    image:
      registry: ""
      repository: neuvector/scanner
      tag: latest
      hash:
    priorityClassName:
    resources: {}
      # limits:
      #   cpu: 400m
      #   memory: 2792Mi
      # requests:
      #   cpu: 100m
      #   memory: 2280Mi
    affinity: {}
    podLabels: {}
    podAnnotations: {}
    env: []
    tolerations: []
    nodeSelector: {}
      # key1: value1
      # key2: value2
    runAsUser:  # MUST be set for Rancher hardened cluster
    internal: # this is used for internal communication. Please use the SAME CA for all the components (controller, scanner, adapter and enforcer)
      certificate:
        secret: neuvector-internal
        keyFile: tls.key
        pemFile: tls.crt
        caFile: ca.crt # must be the same CA for all internal.

docker:
  path: /var/run/docker.sock

resources: {}
  # limits:
  #   cpu: 400m
  #   memory: 2792Mi
  # requests:
  #   cpu: 100m
  #   memory: 2280Mi

k3s:
  enabled: true
  runtimePath: /run/k3s/containerd/containerd.sock

bottlerocket:
  enabled: false
  runtimePath: /run/dockershim.sock

containerd:
  enabled: false
  path: /var/run/containerd/containerd.sock

crio:
  enabled: false
  path: /var/run/crio/crio.sock

admissionwebhook:
  type: ClusterIP

crdwebhook:
  enabled: true
  type: ClusterIP

awsbilling:
  enabled: false
  accountNumber: ""
  roleName: ""
  serviceAccount: csp
  annotations: {}
  imagePullSecrets:
  image:
    repository: neuvector/neuvector-csp-adapter
    tag: 1.0.0
    imagePullPolicy: IfNotPresent
